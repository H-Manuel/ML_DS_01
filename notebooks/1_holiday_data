import pandas as pd
import os
import re

#%% 
# 1. Roh‑CSV einlesen
file_path = os.path.abspath(os.path.join(
    os.path.dirname(__file__),
    '../data/raw/holiday_list.csv'
))
df = pd.read_csv(file_path)

# Da die erste Spalte keinen Header hat, benennen wir sie in "holiday" um
df = df.rename(columns={df.columns[0]: "holiday"})

#%% 
# 2. DataFrame "schmelzen": Jahre-Spalten in Zeilen transformieren
df_melted = df.melt(
    id_vars=["holiday"],
    var_name="year",
    value_name="date_str"
)

#%% 
# 3. Funktion zum Parsen der unterschiedlichen Datumsformate
def parse_date(row):
    date_str = row['date_str']
    year = int(row['year'])
    if pd.isna(date_str) or date_str.strip() == "":
        return pd.NaT
    
    # Wochentag entfernen (falls vorhanden)
    parts = date_str.split(',')
    if len(parts) > 1:
        date_clean = ','.join(parts[1:]).strip()
    else:
        date_clean = date_str.strip()

    # Jahr anhängen, falls nicht enthalten
    if not re.search(r'\b\d{4}\b', date_clean):
        date_clean = f"{date_clean} {year}"

    # In datetime umwandeln (ungültige Werte → NaT)
    return pd.to_datetime(date_clean, errors='coerce')

# Datum parsen
df_melted['date'] = df_melted.apply(parse_date, axis=1)

#%% 
# 4. Alle Zeilen mit fehlendem Datum entfernen
df_clean = df_melted.dropna(subset=['date'])

# 5. Sortieren und Spaltenauswahl
df_clean = (
    df_clean
    .sort_values(by='date')
    .loc[:, ['date', 'year', 'holiday']]
)

#%% 
# 6. In neue CSV schreiben
output_path = os.path.abspath(os.path.join(
    os.path.dirname(__file__),
    '../data/processed/holiday_list.csv'
))
df_clean.to_csv(output_path, index=False)

print(f"{len(df_clean)} Feiertage geschrieben, alle leeren Datumswerte entfernt.")
